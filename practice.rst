================================
Questions, Examples and Projects
================================

List of Questions:

* `Questions 1: Print, Expressions and Variables`_
* `Questions 2: Functions, Logic and Conditionals`_
     
List of Examples:

* `Examples 1: Expressions`_
* `Examples 2: Assignment and Variables`_
* `Examples 3: Functions`_

List of Projects:

* `Project 1: Hello World!`_
* `Project 2: Rock, Paper, Scissors, Lizard, Spock`_


Questions 1: Print, Expressions and Variables
+++++++++++++++++++++++++++++++++++++++++++++

Question 1
----------

Which of the following are syntactically correct strings?

* ``'She shouted "Hello!" very loudly.'`` 
* ``"Hello, world."`` 
* ``[Hello]`` (not a string - string must use quotation marks)
* ``Hello`` (not a string - string must use quotation marks)
* ``'This is great!'`` 

Question 2
----------

To display a value in the console, what Python keyword do you use?

``print``

Question 3
----------

In the following code, the one line starting with #. What does this line mean to Python?::

    tax_rate = 0.15
    income = 40000
    deduction = 10000
    # Calculate income taxes
    tax = (income - deduction) * tax_rate
    print tax

* This text is used as a file name for the code.
* The text is stored in a special variable called #.
* This is a syntax error.
* This text is printed on the console.
* **This is a comment aimed at the human reader. Python ignores such comments.**

Question 4
----------

Which of the following arithmetic expressions are syntactically correct?

* ``7 / +4``
* ``9 + * 4`` (syntax error - two operators are together)
* ``(8 + (1 + (2 * 4) - 3))``
* ``(7 - 2) / (3 ** 2)``
* ``9 - (2 - (4 * 3)`` (syntax error - parenthesis not closed)

Question 5
----------

You would like to make it so that the variable ounces has the value 16, thus representing one pound. What simple Python statement will accomplish this?

* ``16 = ounces`` (syntax error)
* ``ounces = 16``
* ``ounces := 16`` (syntax error)

Question 6
----------

A gram is equal to 0.035274 ounces. Assume that the variable mass_in_ounces has a value representing a mass in ounces. Which arithmetic expressions below using the variable mass_in_ounces represent the equivalent mass in grams?

* ``0.035274 * mass_in_ounces``
* ``mass_in_ounces / 0.035274`` (correct)
* ``0.035274 / mass_in_ounces``
* ``mass_in_ounces * 0.035274``

Question 7
----------

Which of the following can be used as a variable name?

* ``ounces``
* ``16ounces`` (syntax error - cannot start variable with digits)
* ``number123``
* ``my-number`` (syntax error - dash is a minus sign)
* ``MYnumber`` (ok but unconventional)
* ``__number__`` (ok but only for special variables)

Question 8
----------

Assume you have values in the variables x and y. Which statement(s) would result in x having the sum of the current values of x and y?

* ``x += y`` (this)
* ``x = x + y`` (this)
* ``y += x``
* ``x += x + y``

Question 9
----------

Python file names traditionally end in what characters after a period? Don't include the period.

``py``

Question 10
-----------

We encourage you to save your Python files where?

* Nowhere — Python automatically saves your files for you
* On your computer only
* **In "the cloud" and on your computer**
* In "the cloud" only

Questions 2: Functions, Logic and Conditionals
++++++++++++++++++++++++++++++++++++++++++++++

Question 1
----------

An if statement can have how many elif parts?

* **Unlimited, i.e., 0 or more**
* 1
* 0

Question 2
----------

Consider the Boolean expression not (p or not q). Give the four following values:

* the value of the expression when p is True, and q is True = False
* the value of the expression when p is True, and q is False = False
* the value of the expression when p is False, and q is True = True
* the value of the expression when p is False, and q is False = False

Question 3
----------

Given a non-negative integer n, which of the following expressions computes the ten's digit of n? For example, if n is 123, then we want the expression to evaluate to 2.

* (n - n % 10) / 10
* **(n // 10) % 10**
* **((n - n % 10) % 100) / 10**

Question 4
----------

The function calls random.randint(0, 10) and random.randrange(0, 10) generate random numbers in different ranges. What number can be generated by one of these functions, but not the other? 

**10**

By the way, we (and most Python programmers) always prefer to use random.randrange() since it handles numerical ranges in a way that is more consistent with the rest of Python.

Question 5
----------

Implement the mathematical function :math:`f(x) = -5 x^5 + 69 x^2 - 47` as a Python function. Then use Python to compute the function values :math:`f(0), f(1), f(2), and f(3)`. Enter the maximum of these four numbers.

**69**

.. testcode::

   def quartic(x):
       return -5*x**5 + 69*x**2 - 47
   
   quartic(0)
   quartic(1)
   quartic(2)
   quartic(3)

.. testoutput::

   -47
   17
   69
   -641

Question 6
----------

When investing money, an important concept to know is compound interest. The equation :math:`FV = PV (1+rate)^{periods}` relates the following four quantities.

* The present value (PV) of your money is how much money you have now.
* The future value (FV) of your money is how much money you will have in the future.
* The nominal interest rate per period (rate) is how much interest you earn during a particular length of time, before accounting for compounding. This is typically expressed as a percentage.
* The number of periods (periods) is how many periods in the future this calculation is for.

Before submitting your answer, test your function on the following example. future_value(500, .04, 10, 10) should return 745.317442824.

**1061.83480113**

.. testcode::

   def future_value(present_value, annual_rate, periods_per_year, years):
       rate_per_period = annual_rate / periods_per_year
       periods = periods_per_year * years

       return present_value*(1 + rate_per_period)**(periods_per_year*years)

   print "$1000 at 2% compounded 365 times per year for 3 years yields $", future_value(1000, .02, 365, 3)

.. testoutput::

   $1000 at 2% compounded 365 times per year for 3 years yields $ 1061.83480113


Question 7
----------

There are several ways to calculate the area of a regular polygon. Given the number of sides, n, and the length of each side, s, the polygon's area is

$$¼ n s^2 / tan(π/n)$$

For example, a regular polygon with 5 sides, each of length 7 inches, has area 84.3033926289 square inches.

Write a function that calculates the area of a regular polygon, given the number of sides and length of each side. Submit the area of a regular polygon with 7 sides each of length 3 inches. Enter a number (and not the units) with at least four digits of precision after the decimal point.

Note that the use of inches as the unit of measurement in these examples is arbitrary. Python only keeps track of the numerical values, not the units.

**32.705211996014306**

.. testcode::

   import math

   def polygon_area(no_of_sides, side_length):
       return (0.25*no_of_sides*side_length**2) / tan(math.pi/no_of_sides)

   polygon_area(5,7)
   polygon_area(7,3)

.. testoutput::

   84.303392628859385
   32.705211996014306

Question 8
----------

Running the following program results in the error SyntaxError: bad input on line 8 ('return'). Which of the following describes the problem?::

    def max_of_2(a, b):
        if a > b:
            return a
        else:
            return b

    def max_of_3(a, b, c):
    return max_of_2(a, max_of_2(b, c))

* Misspelled keyword
* **Incorrect indentation**
* Misspelled function name
* Wrong number of arguments in function call
* Extra parenthesis
* Misspelled variable name
* Missing colon
* Missing parenthesis

Question 9
----------

The following code has a number of syntactic errors in it. The intended math calculations are correct, so the only errors are syntactic. Fix the syntactic errors.

Once the code has been fully corrected, it should print out two numbers. The first should be 1.09888451159. Submit the second number printed in CodeSkulptor. Provide at least four digits of precision after the decimal point.::

    define project_to_distance(point_x point_y distance):
        dist_to_origin = math.square_root(pointx ** 2 + pointy ** 2)    
         scale == distance / dist_to_origin
        print point_x * scale, point_y * scale
    
    project-to-distance(2, 7, 4)

**3.84609579056**

.. testcode::

   import math

   def project_to_distance(point_x, point_y, distance):
       dist_to_origin = math.sqrt(point_x ** 2 + point_y ** 2)    
       scale = distance / dist_to_origin
       print point_x * scale, point_y * scale
    
   project_to_distance(2, 7, 4)

.. testoutput::

   1.09888451159 3.84609579056

Examples 1: Expressions
+++++++++++++++++++++++

.. literalinclude:: _python/examples_1.py

Examples 2: Assignment and Variables
++++++++++++++++++++++++++++++++++++

.. literalinclude:: _python/examples_2.py

Examples 3: Functions
+++++++++++++++++++++

.. literalinclude:: _python/examples_3.py

Project 1: Hello World!
+++++++++++++++++++++++

.. literalinclude:: _python/project_1.py

Project 2: Rock, Paper, Scissors, Lizard, Spock
+++++++++++++++++++++++++++++++++++++++++++++++

.. literalinclude:: _python/project_2.py
