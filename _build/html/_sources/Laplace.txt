
.. code:: python

    def laplace_equation_numerical(niter, nx, ny, xmax, ymax):
    
        """
        Returns the velocity field and distance for 2D linear convection
        """
        # Increments:
        dx = xmax/(nx-1)
        dy = ymax/(ny-1)
    
        # Initialise data structures:
        import numpy as np
        p = np.zeros(((nx,ny,niter)))
        x = np.zeros(nx)
        y = np.zeros(ny)
        jpos = np.zeros(ny)
        jneg = np.zeros(ny)
    
        # X Loop
        for i in range(0,nx):
          x[i] = i*dx
    
        # Y Loop
        for j in range(0,ny):
          y[j] = j*dy
    
        # Initial conditions
        p[:,:,0] = 0
    
        # Dirichlet Boundary Conditions:
    
        # p boundary, left:
        p[0,:,:] = 0
    
        # p boundary, right:
        for j in range(0,ny):
          p[nx-1,j,:] = y[j] 
    
        # von Neumann Boundary Conditions:
    
        # Values for correction at boundaries:
        for j in range(0,ny-1):
          jpos[j] = j + 1
          jneg[j] = j - 1
    
        # Set Reflection: 
        jpos[ny-1] = ny-2 
        jneg[0] = 1 
    
        # Loop
        for n in range(0,niter-1):
          for i in range(1,nx-1):
            for j in range(0,ny):
              p[i,j,n+1] = (( dy**2 * ( p[i+1,j,n]+p[i-1,j,n] ) 
                           + dx**2 * ( p[i,jpos[j],n]+p[i,jneg[j],n] ) ) 
                           / (2*(dx**2 + dy**2)))
                
        return p, x, y
.. code:: python

    p,x,y=laplace_equation_numerical(100, 51, 51, 2.0, 1.0)
.. code:: python

    def plot_2D(p,x,nt,title):
      """
      Plots the 1D velocity field
      """
    
      import matplotlib.pyplot as plt
      import matplotlib.cm as cm
      plt.figure()
      ax=plt.subplot(111)
      colour=iter(cm.rainbow(np.linspace(0,20,nt)))   
      for n in range(0,nt,20):
         c=next(colour)
         ax.plot(x,p[:,-1,n],linestyle='-',c=c,label='n='+str(n)+' numerical')
      box=ax.get_position()
      ax.set_position([box.x0, box.y0, box.width*0.7,box.height])
      ax.legend( bbox_to_anchor=(1.02,1), loc=2)
      plt.xlabel('x (m)')
      plt.ylabel('p (Pa)')
      plt.ylim([0,1.0])
      plt.xlim([0,2.0])
      plt.title(title)
      plt.show()
.. code:: python

    def plot_3D(p,x,y,time,title,label):
      """
      Plots the 2D velocity field
      """
    
      import matplotlib.pyplot as plt
      from mpl_toolkits.mplot3d import Axes3D
      fig=plt.figure(figsize=(11,7),dpi=100)
      ax=fig.gca(projection='3d')
      ax.set_xlabel('x (m)')
      ax.set_ylabel('y (m)')
      ax.set_zlabel(label)
      ax.set_xlim(0,2)
      ax.set_ylim(0,1)
      ax.view_init(30,225)
      Y,X=np.meshgrid(y,x) #note meshgrid uses y,x not x,y!!!
      surf=ax.plot_surface(X,Y,p[:,:,time], rstride=1, cstride=1)
      plt.title(title)
      plt.show()
.. code:: python

    plot_3D(p,x,y,49,'Figure 1: nt=51, nx=51, ny=51','p (Pa)')


.. image:: Laplace_files/Laplace_4_0.png


.. code:: python

    plot_2D(p,x,99,'Figure 3: nt=51, nx=51, ny=51')


.. image:: Laplace_files/Laplace_5_0.png


.. code:: python

    def laplace_equation_numerical_2(error_target, niter, nx, ny, xmax, ymax):
    
        """
        Returns the velocity field and distance for 2D linear convection
        """
        # Increments:
        dx = xmax/(nx-1)
        dy = ymax/(ny-1)
    
        # Initialise data structures:
        import numpy as np
        p = np.zeros(((nx,ny,niter)))
        x = np.zeros(nx)
        y = np.zeros(ny)
        jpos = np.zeros(ny)
        jneg = np.zeros(ny)
    
        # X Loop
        for i in range(0,nx):
          x[i] = i*dx
    
        # Y Loop
        for j in range(0,ny):
          y[j] = j*dy
    
        # Initial conditions
        p[:,:,0] = 0
    
        # Dirichlet Boundary Conditions:
    
        # p boundary, left:
        p[0,:,:] = 0
    
        # p boundary, right:
        for j in range(0,ny):
          p[nx-1,j,:] = y[j] 
    
        # von Neumann Boundary Conditions:
    
        # Values for correction at boundaries:
        for j in range(0,ny-1):
          jpos[j] = j + 1
          jneg[j] = j - 1
    
        # Set Reflection: 
        jpos[ny-1] = ny-2 
        jneg[0] = 1 
    
        while True: 
          for n in range(0,niter-1):
            for i in range(1,nx-1):
              for j in range(0,ny):
                p[i,j,n+1] = (( dy**2 * ( p[i+1,j,n]+p[i-1,j,n] ) 
                       + dx**2 * ( p[i,jpos[j],n]+p[i,jneg[j],n] ) ) 
                       / (2*(dx**2 + dy**2)))
                error = np.sum(np.abs(p[i,j,n+1])-np.abs(p[i,j,n]) )
            print "n = " + str(n) + " completed"
            if(error < error_target):
              break
          break
                
        return p, x, y
.. code:: python

    p,x,y=laplace_equation_numerical_2(1.0e-2, 500, 51, 51, 2.0, 1.0)

.. parsed-literal::

    n = 0 completed
    n = 1 completed
    n = 2 completed
    n = 3 completed
    n = 4 completed
    n = 5 completed
    n = 6 completed
    n = 7 completed
    n = 8 completed
    n = 9 completed
    n = 10 completed
    n = 11 completed
    n = 12 completed
    n = 13 completed
    n = 14 completed
    n = 15 completed
    n = 16 completed


.. code:: python

    plot_3D(p,x,y,17,'Figure 1: nt=51, nx=51, ny=51','p (Pa)')


.. image:: Laplace_files/Laplace_8_0.png


.. code:: python

    np.sum(np.abs(p[i,j,n+1]))

::


    ---------------------------------------------------------------------------
    NameError                                 Traceback (most recent call last)

    <ipython-input-33-96a50c296d03> in <module>()
    ----> 1 np.sum(np.abs(p[i,j,n+1]))
    

    NameError: name 'i' is not defined


